{"version":3,"sources":["constants/Cells.js","Cell.js","Plane.js","constants/Swipes.js","util/TripleStackPuzzle.js","App.js","util/serviceWorker.js","index.js"],"names":["COLORS_BY_TYPE","CellSquare","styled","Swipeable","color","props","locked","css","Cross","div","EmptyCell","data","row","column","onCellSwiped","swipe","dir","onSwiped","trackMouse","preventDefaultTouchmoveEvent","PlaneContainer","Row","plane","rest","map","rowIndex","key","cell","colIndex","Cell","SWIPE_DIRECTIONS","left","up","right","down","puzzle","this","size","createNew","fill","Array","i","j","col","groupOrder","fromRow","fromCol","toRow","toCol","canMove","oldDst","blankIndex","blankIndexOf","blanks","Math","abs","order","every","group","groupIndex","parseInt","find","Object","keys","TripleStackPuzzle","makeGroupOrder","makePlane","findBlanks","shuffle","shuffleIterations","step","random","length","moves","validMoves","moveIndex","move","findIndex","blankRow","blankCol","dr","dc","from","forEach","res","assign","AppContainer","Menu","Button","span","App","state","restart","bind","handleCellSwipe","setState","directions","console","log","values","groupA","groupB","groupC","selected","isSolvedForGroup","Plane","onClick","isSolved","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0546f33e.chunk.js","sourcesContent":["const GROUP_A = 1\nconst GROUP_B = 2\nconst GROUP_C = 3\n\nexport const COLORS_BY_TYPE = {\n  [GROUP_A]: '#ffde03',\n  [GROUP_B]: '#0336FF',\n  [GROUP_C]: '#FF0266'\n}\n","import React from 'react'\nimport styled, {css} from 'styled-components'\nimport {Swipeable} from 'react-swipeable'\nimport {COLORS_BY_TYPE} from './constants/Cells'\n\nconst CellSquare = styled(Swipeable)`\n  width: 10vh;\n  height: 10vh;\n  background-color: ${({ color = '#383b41' }) => color};\n  transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n  border-radius: 4px;\n  box-shadow: 0 0 0 0.5vh transparent;\n  \n   ${props => !props.locked && css`\n     cursor: pointer;\n\n     :hover {\n       box-shadow: 0 0 0 0.5vh #cfcfcf;\n     }\n  `}\n`\n\nconst Cross = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  transform: rotate(45deg);\n  \n  ::before, ::after {\n    content: \"\";\n    position: absolute;\n    z-index: -1;\n    background-color: #4a4a4a;\n  }\n  \n  ::before {\n    left: 50%;\n    width: 10%;\n    margin-left: -5%;\n    height: 100%;\n  }\n  \n  ::after {\n    top: 50%;\n    height: 10%;\n    margin-top: -5%;\n    width: 100%;\n  }\n`\n\nexport const EmptyCell = styled.div`\n  width: 10vh;\n  height: 10vh;\n`\n\nexport default ({ locked, data, row, column, onCellSwiped }) => {\n  const swipe = data > 0 && !locked ? ({ dir }) => onCellSwiped(dir, row, column, data) : null\n\n  return (\n    <CellSquare\n      color={COLORS_BY_TYPE[data]}\n      locked={locked || data === -1}\n      onSwiped={swipe}\n      trackMouse\n      preventDefaultTouchmoveEvent\n    >\n      {(data === -1) ? <Cross /> : <span />}\n    </CellSquare>\n  );\n}","import React from 'react'\nimport styled from 'styled-components'\nimport Cell from './Cell'\n\nconst PlaneContainer = styled.div`\n  width: 60vh;\n  height: 60vh;\n  margin-top: 2vh;\n  background-color: #2b2f34;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-evenly;\n`\n\nexport const Row = styled.div`\n  display: flex;\n  justify-content: space-evenly;\n`\n\nexport default ({ plane, ...rest }) => (\n  <PlaneContainer>\n    {plane.map((row, rowIndex) => (\n      <Row key={rowIndex}>\n        {row.map((cell, colIndex) => (\n          <Cell\n            key={colIndex}\n            data={cell}\n            row={rowIndex}\n            column={colIndex}\n            {...rest}\n          />\n        ))}\n      </Row>\n    ))}\n  </PlaneContainer>\n)","const SWIPE_DIRECTIONS = {\n  left: 'Left',\n  up: 'Up',\n  right: 'Right',\n  down: 'Down'\n}\n\nexport default SWIPE_DIRECTIONS","import fill from 'lodash.fill'\nimport map from 'lodash.map'\nimport find from 'lodash.find'\nimport forEach from 'lodash.foreach'\nimport shuffle from 'lodash.shuffle'\nimport every from 'lodash.every'\nimport assign from 'lodash.assign'\nimport random from 'lodash.random'\nimport findIndex from 'lodash.findindex'\n\nexport default class TripleStackPuzzle {\n\n  constructor() {\n    this.size = 5;\n    this.createNew()\n  }\n\n  static makeGroupOrder() {\n    const res = {}\n    forEach(shuffle([1, 2, 3]), (group, i) => assign(res, { [i * 2]: group }))\n    return res\n  }\n\n  makePlane(size = 5) {\n    const plane = map(fill(Array(size), fill(Array(size), 0)),\n      (row, i) => map(row, (cell, j) => i % 2 === 0 && j % 2 === 1 ? -1 : 0)\n    )\n\n    return map(plane, row => map(row, (cell, col) => this.groupOrder[col] || cell))\n  }\n\n  move(fromRow, fromCol, toRow, toCol) {\n    if (!this.canMove(fromRow, fromCol, toRow, toCol)) {\n      return\n    }\n\n    // mere swapping\n    const oldDst = this.plane[toRow][toCol]\n    const blankIndex = this.blankIndexOf(toRow, toCol)\n\n    this.plane[toRow][toCol] = this.plane[fromRow][fromCol]\n    this.plane[fromRow][fromCol] = oldDst\n    this.blanks[blankIndex] = [fromRow, fromCol]\n  }\n\n  canMove(fromRow, fromCol, toRow, toCol) {\n    const plane = [...this.plane]\n\n    if (Math.abs(toRow - fromRow) > 1 || Math.abs(toCol - fromCol) > 1) return false\n    if (fromRow === fromCol && toRow === toCol) return false // same cell is no movement\n    if (fromRow !== toRow && fromCol !== toCol) return false // no diagonal movement\n    if (toRow < 0 || toRow >= this.size || toCol < 0 || toCol >= this.size) return false\n    if (fromRow < 0 || fromRow >= this.size || fromCol < 0 || fromCol >= this.size) return false\n\n    // -1 — block, positive — tile\n    return plane[fromRow][fromCol] > 0 && plane[toRow][toCol] === 0\n  }\n\n  isSolved() {\n    const order = this.groupOrder\n    const plane = [...this.plane]\n\n    return every(plane, row => every(row, (cell, col) => !order[col] || row[col] === order[col]))\n  }\n\n  isSolvedForGroup(group) {\n    const groupIndex = parseInt(find(Object.keys(this.groupOrder), i => this.groupOrder[i] === group))\n\n    return every(this.plane, row => row[groupIndex] === group)\n  }\n\n  isBlank(row, col) {\n    return this.blankIndexOf(row, col) !== 0;\n  }\n\n  createNew() {\n    this.groupOrder = TripleStackPuzzle.makeGroupOrder()\n    this.plane = this.makePlane(this.size)\n    this.blanks = this.findBlanks()\n\n    this.shuffle()\n  }\n\n  shuffle(shuffleIterations = 5000) {\n    for (let step = 0; step < shuffleIterations; step++) {\n      const blankIndex = random(this.blanks.length - 1)\n      const [toRow, toCol] = this.blanks[blankIndex]\n      const moves = this.validMoves(toRow, toCol)\n      if (!moves.length) continue\n\n      const moveIndex = random(moves.length - 1)\n      const [fromRow, fromCol] = moves[moveIndex]\n\n      this.move(fromRow, fromCol, toRow, toCol)\n    }\n  }\n\n  blankIndexOf(row, col) {\n    const blanks = [...this.blanks]\n\n    return findIndex(blanks, ([blankRow, blankCol]) => blankRow === row && blankCol === col)\n  }\n\n  validMoves(blankRow, blankCol) {\n    let moves = []\n\n    for (let dr = -1; dr < 2; dr++) {\n      for (let dc = -1; dc < 2; dc++) {\n        const from = [blankRow + dr, blankCol + dc]\n        const [fromRow, fromCol] = from\n\n        if (this.canMove(fromRow, fromCol, blankRow, blankCol)) {\n          moves = [...moves, from]\n        }\n      }\n    }\n\n    return moves\n  }\n\n  findBlanks() {\n    const plane = [...this.plane]\n    let blanks = []\n\n    forEach(plane, (row, i) => forEach(row, (cell, j) => {\n      if (cell === 0) {\n        blanks = [...blanks, [i, j]]\n      }\n    }))\n\n    return blanks\n  }\n}\n\nexport const puzzle = new TripleStackPuzzle()","import React from 'react'\nimport styled from 'styled-components'\nimport Plane, {Row} from './Plane'\nimport Cell, {EmptyCell} from './Cell'\n\nimport directions from './constants/Swipes'\nimport {puzzle} from './util/TripleStackPuzzle'\n\nconst AppContainer = styled.div`\n  width: 150vh;\n  height: 100vh;\n  display: flex;\n  max-width: 90vw;\n  align-items: center;\n  justify-content: center;\n`\n\nconst Menu = styled.div`\n  color: white;\n  letter-spacing: 0;\n  padding: 2vh 0;\n  display: flex;\n  align-items: center;\n  font-size: 3.5vh;\n  justify-content: space-between;\n`\n\nconst Button = styled.span`\n  cursor: pointer;\n  border-top: none;\n  transition: box-shadow 0.2s ease-in-out;\n  border-radius: 4px;\n  padding: 4px;\n  font-size: 2.5vh;\n  box-shadow: 0 0 0 0.1vh white;\n  \n  :hover {\n    box-shadow: 0 0 0 0.3vh white;\n  }\n`\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      plane: puzzle.plane\n    }\n\n    this.restart = this.restart.bind(this)\n    this.handleCellSwipe = this.handleCellSwipe.bind(this)\n  }\n\n  restart() {\n    puzzle.createNew()\n    this.setState({\n      plane: puzzle.plane\n    })\n  }\n\n  handleCellSwipe(dir, row, col) {\n    const { left, up, right, down } = directions\n\n    switch (dir) {\n      case left:\n        puzzle.move(row, col, row, col - 1)\n        break\n      case up:\n        puzzle.move(row, col, row - 1, col)\n        break\n      case right:\n        puzzle.move(row, col, row, col + 1)\n        break\n      case down:\n        puzzle.move(row, col, row + 1, col)\n        break\n      default:\n        console.log(dir, 'did nothing') // exhaust\n    }\n\n    this.setState({ plane: puzzle.plane })\n  }\n\n  render() {\n    const { plane } = this.state\n    const [groupA, groupB, groupC] = Object.values(puzzle.groupOrder)\n\n    return (\n      <AppContainer>\n        <div>\n          <Row>\n            <Cell data={groupA} selected={puzzle.isSolvedForGroup(groupA)} locked />\n            <EmptyCell />\n            <Cell data={groupB} selected={puzzle.isSolvedForGroup(groupB)} locked />\n            <EmptyCell />\n            <Cell data={groupC} selected={puzzle.isSolvedForGroup(groupC)} locked />\n          </Row>\n          <Plane\n            plane={plane}\n            onCellSwiped={this.handleCellSwipe}\n          />\n          <Menu>\n            <Button onClick={() => this.restart()}>{puzzle.isSolved() ? 'Again?' : 'Restart'}</Button>\n            <span>{puzzle.isSolved() ? 'Solved!' : '3 stacks, the game'}</span>\n          </Menu>\n        </div>\n      </AppContainer>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './util/serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}